/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace UserProxyContract {
  export type RawCallStruct = {
    target: string;
    value: BigNumberish;
    data: BytesLike;
    allowFailure: boolean;
  };

  export type RawCallStructOutput = [string, BigNumber, string, boolean] & {
    target: string;
    value: BigNumber;
    data: string;
    allowFailure: boolean;
  };
}

export interface UserProxyContractInterface extends utils.Interface {
  functions: {
    "authorizedAgent()": FunctionFragment;
    "callRawAction(bytes)": FunctionFragment;
    "cancelIntent()": FunctionFragment;
    "executeIntent()": FunctionFragment;
    "issueIntent(bytes,bytes,uint256,uint8)": FunctionFragment;
    "issueIntentImmediateOnly(bytes)": FunctionFragment;
    "multicall((address,uint256,bytes,bool)[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueERC20(address)": FunctionFragment;
    "rescueNative()": FunctionFragment;
    "sFeePerCall()": FunctionFragment;
    "sNumberOfCalls()": FunctionFragment;
    "sendERC20(address,address,uint256)": FunctionFragment;
    "sendNative(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAgent(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorizedAgent"
      | "callRawAction"
      | "cancelIntent"
      | "executeIntent"
      | "issueIntent"
      | "issueIntentImmediateOnly"
      | "multicall"
      | "owner"
      | "renounceOwnership"
      | "rescueERC20"
      | "rescueNative"
      | "sFeePerCall"
      | "sNumberOfCalls"
      | "sendERC20"
      | "sendNative"
      | "transferOwnership"
      | "updateAgent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizedAgent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callRawAction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIntent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeIntent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueIntent",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueIntentImmediateOnly",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [UserProxyContract.RawCallStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rescueERC20", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rescueNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sFeePerCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sNumberOfCalls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendNative",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateAgent", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "authorizedAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callRawAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueIntentImmediateOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sFeePerCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sNumberOfCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendNative", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgent",
    data: BytesLike
  ): Result;

  events: {
    "ERC20Sent(address,address,uint256)": EventFragment;
    "IntentCanceled()": EventFragment;
    "IntentCompleted()": EventFragment;
    "IntentIssued(address,uint256,uint256)": EventFragment;
    "IntentStepExecuted(uint8,bool,uint32)": EventFragment;
    "NativeSent(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RawCallResult(uint256,bool,bytes)": EventFragment;
    "UpdateAgent(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IntentCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IntentCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IntentIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IntentStepExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RawCallResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAgent"): EventFragment;
}

export interface ERC20SentEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type ERC20SentEvent = TypedEvent<
  [string, string, BigNumber],
  ERC20SentEventObject
>;

export type ERC20SentEventFilter = TypedEventFilter<ERC20SentEvent>;

export interface IntentCanceledEventObject {}
export type IntentCanceledEvent = TypedEvent<[], IntentCanceledEventObject>;

export type IntentCanceledEventFilter = TypedEventFilter<IntentCanceledEvent>;

export interface IntentCompletedEventObject {}
export type IntentCompletedEvent = TypedEvent<[], IntentCompletedEventObject>;

export type IntentCompletedEventFilter = TypedEventFilter<IntentCompletedEvent>;

export interface IntentIssuedEventObject {
  user: string;
  immediateCount: BigNumber;
  deferredCount: BigNumber;
}
export type IntentIssuedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  IntentIssuedEventObject
>;

export type IntentIssuedEventFilter = TypedEventFilter<IntentIssuedEvent>;

export interface IntentStepExecutedEventObject {
  cmd: number;
  allowRevert: boolean;
  payloadLen: number;
}
export type IntentStepExecutedEvent = TypedEvent<
  [number, boolean, number],
  IntentStepExecutedEventObject
>;

export type IntentStepExecutedEventFilter =
  TypedEventFilter<IntentStepExecutedEvent>;

export interface NativeSentEventObject {
  to: string;
  amount: BigNumber;
}
export type NativeSentEvent = TypedEvent<
  [string, BigNumber],
  NativeSentEventObject
>;

export type NativeSentEventFilter = TypedEventFilter<NativeSentEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RawCallResultEventObject {
  i: BigNumber;
  success: boolean;
  returnData: string;
}
export type RawCallResultEvent = TypedEvent<
  [BigNumber, boolean, string],
  RawCallResultEventObject
>;

export type RawCallResultEventFilter = TypedEventFilter<RawCallResultEvent>;

export interface UpdateAgentEventObject {
  previousAgent: string;
  newAgent: string;
}
export type UpdateAgentEvent = TypedEvent<
  [string, string],
  UpdateAgentEventObject
>;

export type UpdateAgentEventFilter = TypedEventFilter<UpdateAgentEvent>;

export interface UserProxyContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserProxyContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizedAgent(overrides?: CallOverrides): Promise<[string]>;

    callRawAction(
      rawAction: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelIntent(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeIntent(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    issueIntent(
      immediateStream: BytesLike,
      deferredStream: BytesLike,
      feePerCall: BigNumberish,
      numberOfCalls: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    issueIntentImmediateOnly(
      immediateStream: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicall(
      calls: UserProxyContract.RawCallStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rescueERC20(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rescueNative(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sFeePerCall(overrides?: CallOverrides): Promise<[BigNumber]>;

    sNumberOfCalls(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendERC20(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sendNative(
      recipient: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAgent(
      _authorizedAgent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  authorizedAgent(overrides?: CallOverrides): Promise<string>;

  callRawAction(
    rawAction: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelIntent(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeIntent(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  issueIntent(
    immediateStream: BytesLike,
    deferredStream: BytesLike,
    feePerCall: BigNumberish,
    numberOfCalls: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  issueIntentImmediateOnly(
    immediateStream: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicall(
    calls: UserProxyContract.RawCallStruct[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rescueERC20(
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rescueNative(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sFeePerCall(overrides?: CallOverrides): Promise<BigNumber>;

  sNumberOfCalls(overrides?: CallOverrides): Promise<BigNumber>;

  sendERC20(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sendNative(
    recipient: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAgent(
    _authorizedAgent: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorizedAgent(overrides?: CallOverrides): Promise<string>;

    callRawAction(
      rawAction: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelIntent(overrides?: CallOverrides): Promise<void>;

    executeIntent(overrides?: CallOverrides): Promise<BigNumber>;

    issueIntent(
      immediateStream: BytesLike,
      deferredStream: BytesLike,
      feePerCall: BigNumberish,
      numberOfCalls: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    issueIntentImmediateOnly(
      immediateStream: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(
      calls: UserProxyContract.RawCallStruct[],
      overrides?: CallOverrides
    ): Promise<[boolean[], string[]] & { ok: boolean[]; ret: string[] }>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueERC20(token: string, overrides?: CallOverrides): Promise<void>;

    rescueNative(overrides?: CallOverrides): Promise<void>;

    sFeePerCall(overrides?: CallOverrides): Promise<BigNumber>;

    sNumberOfCalls(overrides?: CallOverrides): Promise<BigNumber>;

    sendERC20(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendNative(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAgent(
      _authorizedAgent: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC20Sent(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): ERC20SentEventFilter;
    ERC20Sent(token?: null, to?: null, amount?: null): ERC20SentEventFilter;

    "IntentCanceled()"(): IntentCanceledEventFilter;
    IntentCanceled(): IntentCanceledEventFilter;

    "IntentCompleted()"(): IntentCompletedEventFilter;
    IntentCompleted(): IntentCompletedEventFilter;

    "IntentIssued(address,uint256,uint256)"(
      user?: string | null,
      immediateCount?: null,
      deferredCount?: null
    ): IntentIssuedEventFilter;
    IntentIssued(
      user?: string | null,
      immediateCount?: null,
      deferredCount?: null
    ): IntentIssuedEventFilter;

    "IntentStepExecuted(uint8,bool,uint32)"(
      cmd?: null,
      allowRevert?: null,
      payloadLen?: null
    ): IntentStepExecutedEventFilter;
    IntentStepExecuted(
      cmd?: null,
      allowRevert?: null,
      payloadLen?: null
    ): IntentStepExecutedEventFilter;

    "NativeSent(address,uint256)"(
      to?: null,
      amount?: null
    ): NativeSentEventFilter;
    NativeSent(to?: null, amount?: null): NativeSentEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RawCallResult(uint256,bool,bytes)"(
      i?: BigNumberish | null,
      success?: null,
      returnData?: null
    ): RawCallResultEventFilter;
    RawCallResult(
      i?: BigNumberish | null,
      success?: null,
      returnData?: null
    ): RawCallResultEventFilter;

    "UpdateAgent(address,address)"(
      previousAgent?: string | null,
      newAgent?: string | null
    ): UpdateAgentEventFilter;
    UpdateAgent(
      previousAgent?: string | null,
      newAgent?: string | null
    ): UpdateAgentEventFilter;
  };

  estimateGas: {
    authorizedAgent(overrides?: CallOverrides): Promise<BigNumber>;

    callRawAction(
      rawAction: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelIntent(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    executeIntent(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    issueIntent(
      immediateStream: BytesLike,
      deferredStream: BytesLike,
      feePerCall: BigNumberish,
      numberOfCalls: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    issueIntentImmediateOnly(
      immediateStream: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    multicall(
      calls: UserProxyContract.RawCallStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rescueERC20(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rescueNative(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    sFeePerCall(overrides?: CallOverrides): Promise<BigNumber>;

    sNumberOfCalls(overrides?: CallOverrides): Promise<BigNumber>;

    sendERC20(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sendNative(
      recipient: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAgent(
      _authorizedAgent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizedAgent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callRawAction(
      rawAction: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelIntent(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeIntent(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    issueIntent(
      immediateStream: BytesLike,
      deferredStream: BytesLike,
      feePerCall: BigNumberish,
      numberOfCalls: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    issueIntentImmediateOnly(
      immediateStream: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicall(
      calls: UserProxyContract.RawCallStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rescueERC20(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rescueNative(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sFeePerCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sNumberOfCalls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendERC20(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sendNative(
      recipient: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAgent(
      _authorizedAgent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
