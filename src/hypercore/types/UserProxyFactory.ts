/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface UserProxyFactoryInterface extends utils.Interface {
  functions: {
    "createProxy()": FunctionFragment;
    "executeIntent(address[])": FunctionFragment;
    "getProxy(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueNative(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userToProxy(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createProxy"
      | "executeIntent"
      | "getProxy"
      | "owner"
      | "renounceOwnership"
      | "rescueNative"
      | "transferOwnership"
      | "userToProxy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeIntent",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "getProxy", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueNative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userToProxy", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "createProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToProxy",
    data: BytesLike
  ): Result;

  events: {
    "BatchExecuteResult(address,address,bool,uint256)": EventFragment;
    "NativeSent(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProxyCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchExecuteResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyCreated"): EventFragment;
}

export interface BatchExecuteResultEventObject {
  user: string;
  proxy: string;
  success: boolean;
  feePaidWei: BigNumber;
}
export type BatchExecuteResultEvent = TypedEvent<
  [string, string, boolean, BigNumber],
  BatchExecuteResultEventObject
>;

export type BatchExecuteResultEventFilter =
  TypedEventFilter<BatchExecuteResultEvent>;

export interface NativeSentEventObject {
  to: string;
  amount: BigNumber;
}
export type NativeSentEvent = TypedEvent<
  [string, BigNumber],
  NativeSentEventObject
>;

export type NativeSentEventFilter = TypedEventFilter<NativeSentEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProxyCreatedEventObject {
  user: string;
  proxy: string;
}
export type ProxyCreatedEvent = TypedEvent<
  [string, string],
  ProxyCreatedEventObject
>;

export type ProxyCreatedEventFilter = TypedEventFilter<ProxyCreatedEvent>;

export interface UserProxyFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserProxyFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProxy(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeIntent(
      users: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getProxy(user: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rescueNative(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userToProxy(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  createProxy(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeIntent(
    users: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getProxy(user: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rescueNative(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userToProxy(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createProxy(overrides?: CallOverrides): Promise<string>;

    executeIntent(users: string[], overrides?: CallOverrides): Promise<void>;

    getProxy(user: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueNative(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userToProxy(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BatchExecuteResult(address,address,bool,uint256)"(
      user?: string | null,
      proxy?: string | null,
      success?: null,
      feePaidWei?: null
    ): BatchExecuteResultEventFilter;
    BatchExecuteResult(
      user?: string | null,
      proxy?: string | null,
      success?: null,
      feePaidWei?: null
    ): BatchExecuteResultEventFilter;

    "NativeSent(address,uint256)"(
      to?: null,
      amount?: null
    ): NativeSentEventFilter;
    NativeSent(to?: null, amount?: null): NativeSentEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProxyCreated(address,address)"(
      user?: string | null,
      proxy?: null
    ): ProxyCreatedEventFilter;
    ProxyCreated(user?: string | null, proxy?: null): ProxyCreatedEventFilter;
  };

  estimateGas: {
    createProxy(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    executeIntent(
      users: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getProxy(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rescueNative(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userToProxy(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createProxy(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeIntent(
      users: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getProxy(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rescueNative(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userToProxy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
