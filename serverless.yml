service: api-hyper-core

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  memorySize: 1024
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    PORT: 3000
    CHAIN_ID: 999
    INTENT_CHUNK_SIZE: ${env:INTENT_CHUNK_SIZE, '10'}
    RPC_URL_HYPEREVM: ${env:RPC_URL_HYPEREVM, 'https://rpc.hyperliquid.xyz/evm'}
    SIGNER_PRIVATE_KEY_MAP: ${env:SIGNER_PRIVATE_KEY_MAP, ''}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
  #apiGateway:
  #  apiKeys:
  #    - apiHyperCoreKey # x-api-key header value

functions:
  api:
    handler: dist/index.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - PATCH
              - DELETE
          #private: true
      - http:
          path: /
          method: ANY
          cors: true
          #private: true

package:
  include:
    - dist/**
    - node_modules/**
    - package.json
  exclude:
    - src/**
    - node_modules/.bin/**
    - test/**
    - tests/**
    - README.md
    - .gitignore
    - .git/**
    - .env

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3009
    host: 0.0.0.0
  dotenv:
    path: .env
    basePath: ./
    logging: false

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiId
    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiRootResourceId
    ApiGatewayUrl:
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayUrl
